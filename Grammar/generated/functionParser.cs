//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\mihan\source\repos\Course\\Grammar\function.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


	using System.Collections;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class functionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, VAR=27, PI=28, NUMBER=29, WHITESPACE=30;
	public const int
		RULE_function = 0, RULE_expr = 1, RULE_skip = 2, RULE_mul = 3, RULE_div = 4, 
		RULE_pow = 5, RULE_add = 6, RULE_sub = 7, RULE_value = 8, RULE_math_func = 9, 
		RULE_cos = 10, RULE_sin = 11, RULE_tan = 12, RULE_cot = 13, RULE_exponent = 14, 
		RULE_sqrt = 15, RULE_abs = 16, RULE_acos = 17, RULE_asin = 18, RULE_atan = 19, 
		RULE_cosh = 20, RULE_sinh = 21, RULE_tanh = 22, RULE_ln = 23, RULE_log = 24;
	public static readonly string[] ruleNames = {
		"function", "expr", "skip", "mul", "div", "pow", "add", "sub", "value", 
		"math_func", "cos", "sin", "tan", "cot", "exponent", "sqrt", "abs", "acos", 
		"asin", "atan", "cosh", "sinh", "tanh", "ln", "log"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'*'", "'/'", "'^'", "'+'", "'-'", "'cos'", "'sin'", 
		"'tan'", "'cot'", "'e'", "'exp'", "'sqrt'", "'abs'", "'acos'", "'asin'", 
		"'atan'", "'cosh'", "'sinh'", "'tanh'", "'ln'", "'log'", "'_'", "'{'", 
		"'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "VAR", "PI", "NUMBER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "function.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static functionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public double Var{
			private get;
			set;
		}

		public double Ans{
			get;
			private set;
		}

		public functionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public functionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FunctionContext : ParserRuleContext {
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(functionParser.Eof, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 0, RULE_function);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case VAR:
			case PI:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; _localctx._expr = expr(0);
				 Ans = _localctx._expr.obj; 
				}
				break;
			case Eof:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public double obj;
		public ExprContext op1;
		public ExprContext _expr;
		public Math_funcContext _math_func;
		public ValueContext _value;
		public ExprContext op2;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public Math_funcContext math_func() {
			return GetRuleContext<Math_funcContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public MulContext mul() {
			return GetRuleContext<MulContext>(0);
		}
		public DivContext div() {
			return GetRuleContext<DivContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public SubContext sub() {
			return GetRuleContext<SubContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				State = 57; Match(T__0);
				State = 58; _localctx._expr = expr(0);
				State = 59; Match(T__1);
				_localctx.obj =  _localctx._expr.obj;
				}
				break;
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
				{
				State = 62; _localctx._math_func = math_func();
				_localctx.obj =  _localctx._math_func.obj;
				}
				break;
			case VAR:
			case PI:
			case NUMBER:
				{
				State = 65; _localctx._value = value();
				_localctx.obj =  _localctx._value.obj;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 97;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 95;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.op1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 71; pow();
						State = 72; _localctx.op2 = _localctx._expr = expr(8);
						_localctx.obj =   Math.Pow(_localctx.op1.obj, _localctx.op2.obj);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.op1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 75;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 76; mul();
						State = 77; _localctx.op2 = _localctx._expr = expr(7);
						_localctx.obj =   _localctx.op1.obj * _localctx.op2.obj;
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.op1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 80;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 81; div();
						State = 82; _localctx.op2 = _localctx._expr = expr(6);
						_localctx.obj =   _localctx.op1.obj / _localctx.op2.obj;
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.op1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 85;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 86; add();
						State = 87; _localctx.op2 = _localctx._expr = expr(5);
						_localctx.obj =   _localctx.op1.obj + _localctx.op2.obj;
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.op1 = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 90;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 91; sub();
						State = 92; _localctx.op2 = _localctx._expr = expr(4);
						_localctx.obj =   _localctx.op1.obj - _localctx.op2.obj;
						}
						break;
					}
					} 
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SkipContext : ParserRuleContext {
		public SkipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSkip(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSkip(this);
		}
	}

	[RuleVersion(0)]
	public SkipContext skip() {
		SkipContext _localctx = new SkipContext(Context, State);
		EnterRule(_localctx, 4, RULE_skip);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulContext : ParserRuleContext {
		public MulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
	}

	[RuleVersion(0)]
	public MulContext mul() {
		MulContext _localctx = new MulContext(Context, State);
		EnterRule(_localctx, 6, RULE_mul);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivContext : ParserRuleContext {
		public DivContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_div; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitDiv(this);
		}
	}

	[RuleVersion(0)]
	public DivContext div() {
		DivContext _localctx = new DivContext(Context, State);
		EnterRule(_localctx, 8, RULE_div);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowContext : ParserRuleContext {
		public PowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pow; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitPow(this);
		}
	}

	[RuleVersion(0)]
	public PowContext pow() {
		PowContext _localctx = new PowContext(Context, State);
		EnterRule(_localctx, 10, RULE_pow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 12, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubContext : ParserRuleContext {
		public SubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
	}

	[RuleVersion(0)]
	public SubContext sub() {
		SubContext _localctx = new SubContext(Context, State);
		EnterRule(_localctx, 14, RULE_sub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public double obj;
		public IToken _NUMBER;
		public ITerminalNode NUMBER() { return GetToken(functionParser.NUMBER, 0); }
		public ITerminalNode VAR() { return GetToken(functionParser.VAR, 0); }
		public ITerminalNode PI() { return GetToken(functionParser.PI, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_value);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; _localctx._NUMBER = Match(NUMBER);
				_localctx.obj =   double.Parse((_localctx._NUMBER!=null?_localctx._NUMBER.Text:null));
				}
				break;
			case VAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; Match(VAR);
				_localctx.obj =  Var;
				}
				break;
			case PI:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116; Match(PI);
				_localctx.obj =  Math.PI;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Math_funcContext : ParserRuleContext {
		public double obj;
		public CosContext _cos;
		public SinContext _sin;
		public TanContext _tan;
		public CotContext _cot;
		public ExponentContext _exponent;
		public SqrtContext _sqrt;
		public AbsContext _abs;
		public AcosContext _acos;
		public AsinContext _asin;
		public AtanContext _atan;
		public CoshContext _cosh;
		public SinhContext _sinh;
		public TanhContext _tanh;
		public LnContext _ln;
		public LogContext _log;
		public CosContext cos() {
			return GetRuleContext<CosContext>(0);
		}
		public SinContext sin() {
			return GetRuleContext<SinContext>(0);
		}
		public TanContext tan() {
			return GetRuleContext<TanContext>(0);
		}
		public CotContext cot() {
			return GetRuleContext<CotContext>(0);
		}
		public ExponentContext exponent() {
			return GetRuleContext<ExponentContext>(0);
		}
		public SqrtContext sqrt() {
			return GetRuleContext<SqrtContext>(0);
		}
		public AbsContext abs() {
			return GetRuleContext<AbsContext>(0);
		}
		public AcosContext acos() {
			return GetRuleContext<AcosContext>(0);
		}
		public AsinContext asin() {
			return GetRuleContext<AsinContext>(0);
		}
		public AtanContext atan() {
			return GetRuleContext<AtanContext>(0);
		}
		public CoshContext cosh() {
			return GetRuleContext<CoshContext>(0);
		}
		public SinhContext sinh() {
			return GetRuleContext<SinhContext>(0);
		}
		public TanhContext tanh() {
			return GetRuleContext<TanhContext>(0);
		}
		public LnContext ln() {
			return GetRuleContext<LnContext>(0);
		}
		public LogContext log() {
			return GetRuleContext<LogContext>(0);
		}
		public Math_funcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_math_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterMath_func(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitMath_func(this);
		}
	}

	[RuleVersion(0)]
	public Math_funcContext math_func() {
		Math_funcContext _localctx = new Math_funcContext(Context, State);
		EnterRule(_localctx, 18, RULE_math_func);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; _localctx._cos = cos();
				_localctx.obj =  _localctx._cos.obj;
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 123; _localctx._sin = sin();
				_localctx.obj =  _localctx._sin.obj;
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126; _localctx._tan = tan();
				_localctx.obj =  _localctx._tan.obj;
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 4);
				{
				State = 129; _localctx._cot = cot();
				_localctx.obj =  _localctx._cot.obj;
				}
				break;
			case T__11:
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 132; _localctx._exponent = exponent();
				_localctx.obj =  _localctx._exponent.obj;
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 135; _localctx._sqrt = sqrt();
				_localctx.obj =  _localctx._sqrt.obj;
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 7);
				{
				State = 138; _localctx._abs = abs();
				_localctx.obj =  _localctx._abs.obj;
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 8);
				{
				State = 141; _localctx._acos = acos();
				_localctx.obj =  _localctx._acos.obj;
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 9);
				{
				State = 144; _localctx._asin = asin();
				_localctx.obj =  _localctx._asin.obj;
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 10);
				{
				State = 147; _localctx._atan = atan();
				_localctx.obj =  _localctx._atan.obj;
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 11);
				{
				State = 150; _localctx._cosh = cosh();
				_localctx.obj =  _localctx._cosh.obj;
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 12);
				{
				State = 153; _localctx._sinh = sinh();
				_localctx.obj =  _localctx._sinh.obj;
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 13);
				{
				State = 156; _localctx._tanh = tanh();
				_localctx.obj =  _localctx._tanh.obj;
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 14);
				{
				State = 159; _localctx._ln = ln();
				_localctx.obj =  _localctx._ln.obj;
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 15);
				{
				State = 162; _localctx._log = log();
				_localctx.obj =  _localctx._log.obj;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CosContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterCos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitCos(this);
		}
	}

	[RuleVersion(0)]
	public CosContext cos() {
		CosContext _localctx = new CosContext(Context, State);
		EnterRule(_localctx, 20, RULE_cos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__7);
			State = 168; Match(T__0);
			State = 169; _localctx._expr = expr(0);
			State = 170; Match(T__1);
			_localctx.obj =  Math.Cos(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSin(this);
		}
	}

	[RuleVersion(0)]
	public SinContext sin() {
		SinContext _localctx = new SinContext(Context, State);
		EnterRule(_localctx, 22, RULE_sin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(T__8);
			State = 174; Match(T__0);
			State = 175; _localctx._expr = expr(0);
			State = 176; Match(T__1);
			_localctx.obj =  Math.Sin(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TanContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterTan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitTan(this);
		}
	}

	[RuleVersion(0)]
	public TanContext tan() {
		TanContext _localctx = new TanContext(Context, State);
		EnterRule(_localctx, 24, RULE_tan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(T__9);
			State = 180; Match(T__0);
			State = 181; _localctx._expr = expr(0);
			State = 182; Match(T__1);
			_localctx.obj =  Math.Tan(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CotContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterCot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitCot(this);
		}
	}

	[RuleVersion(0)]
	public CotContext cot() {
		CotContext _localctx = new CotContext(Context, State);
		EnterRule(_localctx, 26, RULE_cot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(T__10);
			State = 186; Match(T__0);
			State = 187; _localctx._expr = expr(0);
			State = 188; Match(T__1);
			_localctx.obj =  1f / Math.Tan(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExponentContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public PowContext pow() {
			return GetRuleContext<PowContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExponentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterExponent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitExponent(this);
		}
	}

	[RuleVersion(0)]
	public ExponentContext exponent() {
		ExponentContext _localctx = new ExponentContext(Context, State);
		EnterRule(_localctx, 28, RULE_exponent);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191; Match(T__11);
				State = 192; pow();
				State = 193; _localctx._expr = expr(0);
				_localctx.obj =  Math.Exp(_localctx._expr.obj);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; Match(T__12);
				State = 197; Match(T__0);
				State = 198; _localctx._expr = expr(0);
				State = 199; Match(T__1);
				_localctx.obj =  Math.Exp(_localctx._expr.obj);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqrtContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SqrtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqrt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSqrt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSqrt(this);
		}
	}

	[RuleVersion(0)]
	public SqrtContext sqrt() {
		SqrtContext _localctx = new SqrtContext(Context, State);
		EnterRule(_localctx, 30, RULE_sqrt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(T__13);
			State = 205; Match(T__0);
			State = 206; _localctx._expr = expr(0);
			State = 207; Match(T__1);
			_localctx.obj =  Math.Sqrt(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbsContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AbsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAbs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAbs(this);
		}
	}

	[RuleVersion(0)]
	public AbsContext abs() {
		AbsContext _localctx = new AbsContext(Context, State);
		EnterRule(_localctx, 32, RULE_abs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(T__14);
			State = 211; Match(T__0);
			State = 212; _localctx._expr = expr(0);
			State = 213; Match(T__1);
			_localctx.obj =  Math.Abs(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AcosContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AcosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAcos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAcos(this);
		}
	}

	[RuleVersion(0)]
	public AcosContext acos() {
		AcosContext _localctx = new AcosContext(Context, State);
		EnterRule(_localctx, 34, RULE_acos);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(T__15);
			State = 217; Match(T__0);
			State = 218; _localctx._expr = expr(0);
			State = 219; Match(T__1);
			_localctx.obj =  Math.Acos(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsinContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AsinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAsin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAsin(this);
		}
	}

	[RuleVersion(0)]
	public AsinContext asin() {
		AsinContext _localctx = new AsinContext(Context, State);
		EnterRule(_localctx, 36, RULE_asin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(T__16);
			State = 223; Match(T__0);
			State = 224; _localctx._expr = expr(0);
			State = 225; Match(T__1);
			_localctx.obj =  Math.Asin(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtanContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AtanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atan; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterAtan(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitAtan(this);
		}
	}

	[RuleVersion(0)]
	public AtanContext atan() {
		AtanContext _localctx = new AtanContext(Context, State);
		EnterRule(_localctx, 38, RULE_atan);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(T__17);
			State = 229; Match(T__0);
			State = 230; _localctx._expr = expr(0);
			State = 231; Match(T__1);
			_localctx.obj =  Math.Atan(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CoshContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CoshContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cosh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterCosh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitCosh(this);
		}
	}

	[RuleVersion(0)]
	public CoshContext cosh() {
		CoshContext _localctx = new CoshContext(Context, State);
		EnterRule(_localctx, 40, RULE_cosh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(T__18);
			State = 235; Match(T__0);
			State = 236; _localctx._expr = expr(0);
			State = 237; Match(T__1);
			_localctx.obj =  Math.Cosh(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SinhContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SinhContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sinh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterSinh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitSinh(this);
		}
	}

	[RuleVersion(0)]
	public SinhContext sinh() {
		SinhContext _localctx = new SinhContext(Context, State);
		EnterRule(_localctx, 42, RULE_sinh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(T__19);
			State = 241; Match(T__0);
			State = 242; _localctx._expr = expr(0);
			State = 243; Match(T__1);
			_localctx.obj =  Math.Sinh(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TanhContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TanhContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tanh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterTanh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitTanh(this);
		}
	}

	[RuleVersion(0)]
	public TanhContext tanh() {
		TanhContext _localctx = new TanhContext(Context, State);
		EnterRule(_localctx, 44, RULE_tanh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(T__20);
			State = 247; Match(T__0);
			State = 248; _localctx._expr = expr(0);
			State = 249; Match(T__1);
			_localctx.obj =  Math.Tanh(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LnContext : ParserRuleContext {
		public double obj;
		public ExprContext _expr;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ln; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterLn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitLn(this);
		}
	}

	[RuleVersion(0)]
	public LnContext ln() {
		LnContext _localctx = new LnContext(Context, State);
		EnterRule(_localctx, 46, RULE_ln);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(T__21);
			State = 253; Match(T__0);
			State = 254; _localctx._expr = expr(0);
			State = 255; Match(T__1);
			_localctx.obj =  Math.Log(_localctx._expr.obj);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogContext : ParserRuleContext {
		public double obj;
		public IToken _NUMBER;
		public ExprContext _expr;
		public ITerminalNode NUMBER() { return GetToken(functionParser.NUMBER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_log; } }
		public override void EnterRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.EnterLog(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IfunctionListener typedListener = listener as IfunctionListener;
			if (typedListener != null) typedListener.ExitLog(this);
		}
	}

	[RuleVersion(0)]
	public LogContext log() {
		LogContext _localctx = new LogContext(Context, State);
		EnterRule(_localctx, 48, RULE_log);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; Match(T__22);
			State = 259; Match(T__23);
			State = 260; Match(T__24);
			State = 261; _localctx._NUMBER = Match(NUMBER);
			State = 262; Match(T__25);
			State = 263; Match(T__0);
			State = 264; _localctx._expr = expr(0);
			State = 265; Match(T__1);
			_localctx.obj =  Math.Log(_localctx._expr.obj,double.Parse((_localctx._NUMBER!=null?_localctx._NUMBER.Text:null)));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ' ', '\x10F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x39', 
		'\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'G', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x62', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x65', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', 'y', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\xA8', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xCD', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x2', '\x3', '\x4', '\x1B', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x2', '\x2', '\x2', '\x10E', '\x2', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x46', '\x3', '\x2', '\x2', '\x2', '\x6', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'h', '\x3', '\x2', '\x2', '\x2', '\n', 
		'j', '\x3', '\x2', '\x2', '\x2', '\f', 'l', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'n', '\x3', '\x2', '\x2', '\x2', '\x10', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'x', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xCE', '\x3', '\x2', '\x2', '\x2', '\"', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xDA', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '(', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xEC', '\x3', '\x2', '\x2', '\x2', ',', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x30', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\x5', '\x4', '\x3', '\x2', '\x35', '\x36', '\b', '\x2', 
		'\x1', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', '\x2', '\x37', '\x39', 
		'\a', '\x2', '\x2', '\x3', '\x38', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', '\x3', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\b', '\x3', '\x1', '\x2', ';', '<', '\a', '\x3', 
		'\x2', '\x2', '<', '=', '\x5', '\x4', '\x3', '\x2', '=', '>', '\a', '\x4', 
		'\x2', '\x2', '>', '?', '\b', '\x3', '\x1', '\x2', '?', 'G', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\x5', '\x14', '\v', '\x2', '\x41', '\x42', 
		'\b', '\x3', '\x1', '\x2', '\x42', 'G', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\x5', '\x12', '\n', '\x2', '\x44', '\x45', '\b', '\x3', '\x1', 
		'\x2', '\x45', 'G', '\x3', '\x2', '\x2', '\x2', '\x46', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '@', '\x3', '\x2', '\x2', '\x2', '\x46', '\x43', 
		'\x3', '\x2', '\x2', '\x2', 'G', '\x63', '\x3', '\x2', '\x2', '\x2', 'H', 
		'I', '\f', '\t', '\x2', '\x2', 'I', 'J', '\x5', '\f', '\a', '\x2', 'J', 
		'K', '\x5', '\x4', '\x3', '\n', 'K', 'L', '\b', '\x3', '\x1', '\x2', 'L', 
		'\x62', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\f', '\b', '\x2', '\x2', 
		'N', 'O', '\x5', '\b', '\x5', '\x2', 'O', 'P', '\x5', '\x4', '\x3', '\t', 
		'P', 'Q', '\b', '\x3', '\x1', '\x2', 'Q', '\x62', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\f', '\a', '\x2', '\x2', 'S', 'T', '\x5', '\n', '\x6', 
		'\x2', 'T', 'U', '\x5', '\x4', '\x3', '\b', 'U', 'V', '\b', '\x3', '\x1', 
		'\x2', 'V', '\x62', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\f', '\x6', 
		'\x2', '\x2', 'X', 'Y', '\x5', '\xE', '\b', '\x2', 'Y', 'Z', '\x5', '\x4', 
		'\x3', '\a', 'Z', '[', '\b', '\x3', '\x1', '\x2', '[', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\f', '\x5', '\x2', '\x2', ']', '^', '\x5', 
		'\x10', '\t', '\x2', '^', '_', '\x5', '\x4', '\x3', '\x6', '_', '`', '\b', 
		'\x3', '\x1', '\x2', '`', '\x62', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'H', '\x3', '\x2', '\x2', '\x2', '\x61', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x61', 'R', '\x3', '\x2', '\x2', '\x2', '\x61', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\\', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\a', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\a', '\x5', '\x2', '\x2', 'i', '\t', '\x3', '\x2', '\x2', '\x2', 'j', 
		'k', '\a', '\x6', '\x2', '\x2', 'k', '\v', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\a', '\a', '\x2', '\x2', 'm', '\r', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '\b', '\x2', '\x2', 'o', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\a', '\t', '\x2', '\x2', 'q', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '\x1F', '\x2', '\x2', 's', 'y', '\b', '\n', '\x1', 
		'\x2', 't', 'u', '\a', '\x1D', '\x2', '\x2', 'u', 'y', '\b', '\n', '\x1', 
		'\x2', 'v', 'w', '\a', '\x1E', '\x2', '\x2', 'w', 'y', '\b', '\n', '\x1', 
		'\x2', 'x', 'r', '\x3', '\x2', '\x2', '\x2', 'x', 't', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', '\x13', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\x5', '\x16', '\f', '\x2', '{', '|', '\b', '\v', 
		'\x1', '\x2', '|', '\xA8', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x5', 
		'\x18', '\r', '\x2', '~', '\x7F', '\b', '\v', '\x1', '\x2', '\x7F', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x5', '\x1A', '\xE', '\x2', 
		'\x81', '\x82', '\b', '\v', '\x1', '\x2', '\x82', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x84', '\x5', '\x1C', '\xF', '\x2', '\x84', '\x85', 
		'\b', '\v', '\x1', '\x2', '\x85', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x5', '\x1E', '\x10', '\x2', '\x87', '\x88', '\b', '\v', 
		'\x1', '\x2', '\x88', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', 
		'\x5', ' ', '\x11', '\x2', '\x8A', '\x8B', '\b', '\v', '\x1', '\x2', '\x8B', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\"', '\x12', 
		'\x2', '\x8D', '\x8E', '\b', '\v', '\x1', '\x2', '\x8E', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', '$', '\x13', '\x2', '\x90', 
		'\x91', '\b', '\v', '\x1', '\x2', '\x91', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\x5', '&', '\x14', '\x2', '\x93', '\x94', '\b', 
		'\v', '\x1', '\x2', '\x94', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x5', '(', '\x15', '\x2', '\x96', '\x97', '\b', '\v', '\x1', 
		'\x2', '\x97', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x5', 
		'*', '\x16', '\x2', '\x99', '\x9A', '\b', '\v', '\x1', '\x2', '\x9A', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x5', ',', '\x17', 
		'\x2', '\x9C', '\x9D', '\b', '\v', '\x1', '\x2', '\x9D', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x5', '.', '\x18', '\x2', '\x9F', 
		'\xA0', '\b', '\v', '\x1', '\x2', '\xA0', '\xA8', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\x5', '\x30', '\x19', '\x2', '\xA2', '\xA3', '\b', 
		'\v', '\x1', '\x2', '\xA3', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\x5', '\x32', '\x1A', '\x2', '\xA5', '\xA6', '\b', '\v', '\x1', 
		'\x2', '\xA6', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA7', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '}', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\x86', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\x8C', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\x95', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\n', '\x2', '\x2', '\xAA', 
		'\xAB', '\a', '\x3', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\x4', '\x3', 
		'\x2', '\xAC', '\xAD', '\a', '\x4', '\x2', '\x2', '\xAD', '\xAE', '\b', 
		'\f', '\x1', '\x2', '\xAE', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\a', '\v', '\x2', '\x2', '\xB0', '\xB1', '\a', '\x3', '\x2', 
		'\x2', '\xB1', '\xB2', '\x5', '\x4', '\x3', '\x2', '\xB2', '\xB3', '\a', 
		'\x4', '\x2', '\x2', '\xB3', '\xB4', '\b', '\r', '\x1', '\x2', '\xB4', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', '\f', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\x3', '\x2', '\x2', '\xB7', '\xB8', '\x5', 
		'\x4', '\x3', '\x2', '\xB8', '\xB9', '\a', '\x4', '\x2', '\x2', '\xB9', 
		'\xBA', '\b', '\xE', '\x1', '\x2', '\xBA', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\r', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\x3', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\x4', '\x3', '\x2', '\xBE', 
		'\xBF', '\a', '\x4', '\x2', '\x2', '\xBF', '\xC0', '\b', '\xF', '\x1', 
		'\x2', '\xC0', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'\xE', '\x2', '\x2', '\xC2', '\xC3', '\x5', '\f', '\a', '\x2', '\xC3', 
		'\xC4', '\x5', '\x4', '\x3', '\x2', '\xC4', '\xC5', '\b', '\x10', '\x1', 
		'\x2', '\xC5', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', 
		'\xF', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x3', '\x2', '\x2', '\xC8', 
		'\xC9', '\x5', '\x4', '\x3', '\x2', '\xC9', '\xCA', '\a', '\x4', '\x2', 
		'\x2', '\xCA', '\xCB', '\b', '\x10', '\x1', '\x2', '\xCB', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xCD', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCF', '\a', '\x10', '\x2', '\x2', '\xCF', '\xD0', '\a', 
		'\x3', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\x4', '\x3', '\x2', '\xD1', 
		'\xD2', '\a', '\x4', '\x2', '\x2', '\xD2', '\xD3', '\b', '\x11', '\x1', 
		'\x2', '\xD3', '!', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', 
		'\x11', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x3', '\x2', '\x2', '\xD6', 
		'\xD7', '\x5', '\x4', '\x3', '\x2', '\xD7', '\xD8', '\a', '\x4', '\x2', 
		'\x2', '\xD8', '\xD9', '\b', '\x12', '\x1', '\x2', '\xD9', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x12', '\x2', '\x2', '\xDB', 
		'\xDC', '\a', '\x3', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\x4', '\x3', 
		'\x2', '\xDD', '\xDE', '\a', '\x4', '\x2', '\x2', '\xDE', '\xDF', '\b', 
		'\x13', '\x1', '\x2', '\xDF', '%', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE1', '\a', '\x13', '\x2', '\x2', '\xE1', '\xE2', '\a', '\x3', '\x2', 
		'\x2', '\xE2', '\xE3', '\x5', '\x4', '\x3', '\x2', '\xE3', '\xE4', '\a', 
		'\x4', '\x2', '\x2', '\xE4', '\xE5', '\b', '\x14', '\x1', '\x2', '\xE5', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x14', '\x2', 
		'\x2', '\xE7', '\xE8', '\a', '\x3', '\x2', '\x2', '\xE8', '\xE9', '\x5', 
		'\x4', '\x3', '\x2', '\xE9', '\xEA', '\a', '\x4', '\x2', '\x2', '\xEA', 
		'\xEB', '\b', '\x15', '\x1', '\x2', '\xEB', ')', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xED', '\a', '\x15', '\x2', '\x2', '\xED', '\xEE', '\a', 
		'\x3', '\x2', '\x2', '\xEE', '\xEF', '\x5', '\x4', '\x3', '\x2', '\xEF', 
		'\xF0', '\a', '\x4', '\x2', '\x2', '\xF0', '\xF1', '\b', '\x16', '\x1', 
		'\x2', '\xF1', '+', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', 
		'\x16', '\x2', '\x2', '\xF3', '\xF4', '\a', '\x3', '\x2', '\x2', '\xF4', 
		'\xF5', '\x5', '\x4', '\x3', '\x2', '\xF5', '\xF6', '\a', '\x4', '\x2', 
		'\x2', '\xF6', '\xF7', '\b', '\x17', '\x1', '\x2', '\xF7', '-', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x17', '\x2', '\x2', '\xF9', 
		'\xFA', '\a', '\x3', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\x4', '\x3', 
		'\x2', '\xFB', '\xFC', '\a', '\x4', '\x2', '\x2', '\xFC', '\xFD', '\b', 
		'\x18', '\x1', '\x2', '\xFD', '/', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\a', '\x18', '\x2', '\x2', '\xFF', '\x100', '\a', '\x3', '\x2', 
		'\x2', '\x100', '\x101', '\x5', '\x4', '\x3', '\x2', '\x101', '\x102', 
		'\a', '\x4', '\x2', '\x2', '\x102', '\x103', '\b', '\x19', '\x1', '\x2', 
		'\x103', '\x31', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\a', '\x19', 
		'\x2', '\x2', '\x105', '\x106', '\a', '\x1A', '\x2', '\x2', '\x106', '\x107', 
		'\a', '\x1B', '\x2', '\x2', '\x107', '\x108', '\a', '\x1F', '\x2', '\x2', 
		'\x108', '\x109', '\a', '\x1C', '\x2', '\x2', '\x109', '\x10A', '\a', 
		'\x3', '\x2', '\x2', '\x10A', '\x10B', '\x5', '\x4', '\x3', '\x2', '\x10B', 
		'\x10C', '\a', '\x4', '\x2', '\x2', '\x10C', '\x10D', '\b', '\x1A', '\x1', 
		'\x2', '\x10D', '\x33', '\x3', '\x2', '\x2', '\x2', '\t', '\x38', '\x46', 
		'\x61', '\x63', 'x', '\xA7', '\xCC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
